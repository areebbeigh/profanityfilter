---
name: Publish to pypi
on:
  push:
  #On versioned releases
    tags:
      - '*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      force:
        type: choice
        description: Retry Publish Version
        options:
          - No
          - Yes
      environment:
        description: 'Deployment environment'
        required: true
        default: 'pypi'
        type: choice
        options:
          - pypi
          - testpypi
      dryRun:
        description: 'Dry Run deployment (set to false to deploy)'
        required: true
        type: boolean
        default: true



jobs:
  lint:
    if: github.repository == 'areebbeigh/profanityfilter'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install requirements
        run: pip install flake8 pycodestyle
      - name: Check syntax
        run: flake8


  test:
    needs: lint
    strategy:
      fail-fast: false

    name: Test on 3,x
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4
        timeout-minutes: 2

      - uses: actions/setup-python@v5
        timeout-minutes: 2
        with:
          python-version: '3.x'

      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run tests
        continue-on-error: ${{ matrix.experimental }}
        run: pytest  --junit-xml=/tmp/artifacts/junit/results.xml

      - name: Test Summary
        uses: test-summary/action@v2
        continue-on-error: ${{ matrix.experimental }}
        with:
          paths: "/tmp/artifacts/junit/*.xml"
        if: always()

  publishSkipped:
    if: github.repository != 'areebbeigh/profanityfilter'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "## Skipping PyPI publish on downstream repository" >> $GITHUB_STEP_SUMMARY

  publish:
    needs: test
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    name: Publish Package
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'pypi' }}
      url: ${{ steps.version.outputs.url }}
    concurrency:
      group: ${{ github.event.inputs.environment }}-deployment
      cancel-in-progress: false
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'pypi' }}
    steps:
      - name: Get Git Tag and set url from environment
        id: version
        run: |
          #!/bin/bash

          TAG_VALUE=${GITHUB_REF/refs\/tags\//}
          echo "version=${TAG_VALUE}" >> $GITHUB_OUTPUT

          # Extract the repository name (minus the owner/org)
          reponame=$(basename $GITHUB_REPOSITORY)
          echo "reponame=${reponame}" >> $GITHUB_OUTPUT

          if [ "$env.ENVIRONMENT" == "testpypi" ]; then
            url="https://test.pypi.org/project/$reponame/$TAG_VALUE/"
            echo "environment=${env.ENVIRONMENT}" >> $GITHUB_OUTPUT
          else
            url="https://pypi.org/project/$reponame/$TAG_VALUE/"
            echo "environment=pypi" >> $GITHUB_OUTPUT
          fi

          echo "url=${url}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate tag version
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          PYTHON_VERSION=$(grep -E "\bversion='[^']+'" setup.py | awk -F "'" '{print $2}')
          echo "Tag version is [${{ steps.version.outputs.version }}], Python version is [$PYTHON_VERSION]"
          if [ "${{ steps.version.outputs.version }}" != "$PYTHON_VERSION" ]; then
            echo "Version mismatch; tag version is [${{ steps.version.outputs.version }}] but Python version is [$PYTHON_VERSION]" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Build package ${{ steps.version.outputs.reponame }} @ ${{ steps.version.outputs.version }}
        run: |
          python -m build
      - name: Publish package distributions to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags') && steps.version.outputs.environment == 'pypi' && github.event.inputs.dryRun != 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          skip-existing: true
#          verbose: true
#          print-hash: true
      - name: Test Publish package distributions to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags') && steps.version.outputs.environment == 'testpypi' && github.event.inputs.dryRun == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
#          skip-existing: true
#          verbose: true
#          print-hash: true
      - name: Summary output
        if: ${{ startsWith(github.ref, 'refs/tags') && github.event.inputs.dryRun != 'true' }}
        run:
          echo "Published ${{ steps.version.outputs.repo_name }} @ ${{ steps.version.outputs.version }} to ${{ steps.version.outputs.url }}" >> $GITHUB_STEP_SUMMARY

      - name: (TEST RUN) Test Publish package distributions to PyPI
        if: ${{ github.event.inputs.dryRun == 'true' }}
        run:
          echo "Dry run deployment, did not publish" >> $GITHUB_STEP_SUMMARY
